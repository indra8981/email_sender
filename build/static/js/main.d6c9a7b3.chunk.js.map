{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","sending","rule","value","callback","regEmail","emails","split","invalid_emails","forEach","email","test","push","length","join","TextArea","Input","antIcon","LoadingOutlined","style","fontSize","spin","className","title","this","indicator","tip","hoverable","name","initialValues","remember","onFinish","values","setState","axios","post","then","res","notification","success","message","description","catch","err","error","layout","Item","label","rules","required","validator","validateEmails","validateTrigger","disabled","autoSize","placeholder","initialValue","wrapperCol","offset","span","type","htmlType","size","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVAQqBA,G,gEACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,GAHM,E,2DAOJC,EAAMC,EAAOC,GAC1B,IAAIC,EAAW,yJACf,GAAIF,EAAO,CACT,IAAMG,EAASH,EAAMI,MAAM,KACrBC,EAAiB,GAMvB,GALAF,EAAOG,SAAQ,SAAAC,GACRL,EAASM,KAAKD,IACjBF,EAAeI,KAAKF,MAGpBF,EAAeK,OAAS,EAC1B,OAAOT,EAAS,mCAAD,OAAoCI,EAAeM,KAAK,MAAxD,uCAGnBV,M,+BAGQ,IAAD,OACCW,EAAaC,IAAbD,SACFE,EAAU,cAACC,EAAA,EAAD,CAAiBC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IA2B9D,OACE,sBAAKC,UAAU,iBAAf,UACE,cAAC,IAAD,CAAYA,UAAU,mBAAmBC,MAAM,qBAC/C,sBAAKD,UAAU,aAAf,UACGE,KAAKxB,MAAMC,SAAY,qBAAKqB,UAAU,UAAf,SACtB,cAAC,IAAD,CAAMG,UAAWR,EAASS,IAAI,uBAGhC,cAAC,IAAD,CAAMC,WAAS,EAAf,SACE,eAAC,IAAD,CACEC,KAAK,QACLC,cAAe,CACbC,UAAU,GAEZC,SAlCO,SAACC,GAChB,EAAKC,SAAS,CAAEhC,SAAS,IACzBiC,IAAMC,KAAK,cAAeH,GACvBI,MAAK,SAACC,GACL,EAAKJ,SAAS,CAAEhC,SAAS,IACzBqC,IAAaC,QAAQ,CACnBC,QAAS,WACTC,YACE,gCAEHC,OAAM,SAACC,GACR,EAAKV,SAAS,CAAEhC,SAAS,IACzBqC,IAAaM,MAAM,CACjBJ,QAAS,SACTC,YACE,4CAoBAI,OAAO,WANT,UAQE,cAAC,IAAKC,KAAN,CACEC,MAAM,KACNnB,KAAK,SACLoB,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,0CAEX,CACEU,UAAW1B,KAAK2B,iBAGpBC,gBAAgB,SAZlB,SAcE,cAACrC,EAAD,CAAUsC,SAAU7B,KAAKxB,MAAMC,QAASqD,UAAQ,EAACC,YAAY,4CAG/D,cAAC,IAAKT,KAAN,CACEC,MAAM,UACNnB,KAAK,UACL4B,aAAa,GAHf,SAKE,cAAC,IAAD,CAAOH,SAAU7B,KAAKxB,MAAMC,QAASsD,YAAY,yBAGnD,cAAC,IAAKT,KAAN,CACEC,MAAM,OACNnB,KAAK,OACLoB,MAAO,CACL,CACEC,UAAU,EACVT,QAAS,mCANf,SAUE,cAACzB,EAAD,CAAUsC,SAAU7B,KAAKxB,MAAMC,QAASsD,YAAY,0BAGtD,cAAC,IAAKT,KAAN,2BAjFS,CACjBW,WAAY,CACVC,OAAQ,EACRC,KAAM,MA8EA,aACE,cAAC,IAAD,CAAQN,SAAU7B,KAAKxB,MAAMC,QAAS2D,KAAK,UAAUC,SAAS,SAASC,KAAK,QAA5E,0C,GA9GiBC,cCIlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6c9a7b3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Input, Button, notification, Card, PageHeader, Spin } from 'antd';\nimport axios from 'axios';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sending: false,\n    };\n  }\n\n  validateEmails(rule, value, callback) {\n    let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (value) {\n      const emails = value.split(',');\n      const invalid_emails = [];\n      emails.forEach(email => {\n        if (!regEmail.test(email)) {\n          invalid_emails.push(email);\n        }\n      });\n      if (invalid_emails.length > 0) {\n        return callback(`Please look into these emails - ${invalid_emails.join(', ')}. These doest not seem to be valid`);\n      }\n    }\n    callback();\n  }\n\n  render() {\n    const { TextArea } = Input;\n    const antIcon = <LoadingOutlined style={{ fontSize: 30 }} spin />;\n    const tailLayout = {\n      wrapperCol: {\n        offset: 8,\n        span: 16,\n      },\n    };\n    const onFinish = (values) => {\n      this.setState({ sending: true });\n      axios.post(\"/send-email\", values)\n        .then((res) => {\n          this.setState({ sending: false });\n          notification.success({\n            message: 'Success!',\n            description:\n              'Emails Sent Successfully'\n          });\n        }).catch((err) => {\n          this.setState({ sending: false });\n          notification.error({\n            message: 'Error!',\n            description:\n              'Error occurred while sending emails'\n          });\n        })\n    };\n\n    return (\n      <div className=\"page-container\">\n        <PageHeader className=\"site-page-header\" title=\"Email Sender App\" />\n        <div className=\"email-form\">\n          {this.state.sending && (<div className=\"loading\">\n            <Spin indicator={antIcon} tip=\"Sending Email...\" />\n          </div>)}\n\n          <Card hoverable>\n            <Form\n              name=\"basic\"\n              initialValues={{\n                remember: true,\n              }}\n              onFinish={onFinish}\n              layout=\"vertical\"\n            >\n              <Form.Item\n                label=\"To\"\n                name=\"emails\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter atleast one email address',\n                  },\n                  {\n                    validator: this.validateEmails,\n                  }\n                ]}\n                validateTrigger='onBlur'\n              >\n                <TextArea disabled={this.state.sending} autoSize placeholder=\"Enter comma seperated email addresses\" />\n              </Form.Item>\n\n              <Form.Item\n                label=\"Subject\"\n                name=\"subject\"\n                initialValue=\"\"\n              >\n                <Input disabled={this.state.sending} placeholder=\"Write your Subject\" />\n              </Form.Item>\n\n              <Form.Item\n                label=\"Body\"\n                name=\"body\"\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter body of the email',\n                  }\n                ]}\n              >\n                <TextArea disabled={this.state.sending} placeholder=\"Enter body of email\" />\n              </Form.Item>\n\n              <Form.Item {...tailLayout}>\n                <Button disabled={this.state.sending} type=\"primary\" htmlType=\"submit\" size=\"large\">\n                  Send Email\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}